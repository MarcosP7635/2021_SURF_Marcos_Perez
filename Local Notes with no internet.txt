If each column is a spectral channel, what is each row? The first column is the wavelength in nm,
so each row is a different wavelength! Trippy. And the value is the log of intensity ratio (dB?)
6/23
FPR allows the light to propagate - Free propagation region. Ignore the gray vertical line in the 
greeen region. Silican nitride - 
Higher index in the pole and lower in the clearing. That's what allows the light to propagate. 
Waveguides are similar to optical fibers in this respect. High index guides it and low index surrounds
it! (remember from Hect). Clearing is silicon dioxide and pole is silicon nitride. Everything in Figure 
1 from Pradip's 2021 paper is silicon nitride. IRL, it's surrounded by silicon dioxide. If I ask the 
same question twice, ask Pradip to record it. Each channel is symmetrical near the peak wavelength, 
but as the transmission decreases, they become asymmetrical. The center is symmetrical, but the 
wings are not. On the edges of the AWG, the incoming (Figure 2 on the 2017 paper https://arxiv.org/abs/2106.04598. Output FPR)  
The central output channel will receive the light symmetrically from the left and right sides of the 
array. The edge channels don't have this advantage, so they see more light from one side of the array
from the other (inverse square law!). you can individually plot the peaks of each channel and the wings 
if you want!The find_peaks function is defined in scipy. There's a text file for
each channel with its transmission curve. There are two peaks in each column, one corresponding to each
spectral order. There are tinier peaks in the noise. Find main peaks, not the ones in the noise! 
That's why we define the distance to be 80% of the FSR. Look at the find_3dB_width. lam_n - lam_{n-1}.
find_peaks needs it in indices so we divide by the wavelength step size.  

You can do things yourself if pradip doesn't reply. Tomorrow go to campus maybe?
Get the first plot out with channels vs power! See if we need to change our approach.
Get your initial plots then replan!!! 

Hi Marcos, I see that you changed the find_3dB_width function to add a height = -7. That will not work. This is because, we are first converting the dB-scale transmission to linear scale in that function. See the definition of  op_power_norm_fib_lin in the following code. So -7 as the height will be inconsequential since the 'linear' values are all positive.
def find_3dB_width(lam, op_power_norm_fib, FSR):
    d_lam = (lam[len(lam)-1]-lam[0])/len(lam)
    print(d_lam)
    FSR_chunk = np.int(0.8*FSR/d_lam) # Taking 80% of the FSR as the minimum distance between the peaks
    op_power_norm_fib_lin = np.power(10.0,  op_power_norm_fib/10) # converting to linear scale for peak-width measurement
    peaks, _ = find_peaks(op_power_norm_fib_lin, distance=FSR_chunk)

Marcos Perez  11:17 AM
Thank you for the correction and I appreciate the explanation. I expect the smallest linear value to be .3 for any of the peaks, so should I use .2 as the threshold instead? Should I not use a threshold at all? I have the original Jupyter Notebook on the Github as well so I can just change that function back to the original if that's better.

Pradip Gatkine  11:18 AM
Here's the figure I could plot after the correction;
image.png 
image.png



1 reply
Today at 11:19 AMView thread

Pradip Gatkine  11:19 AM
So all the peaks are properly detected

Pradip Gatkine  11:22 AM
If you do height = 0.1 in the find_3dB_width function, then you can get all the peaks correctly, without any additional detection of sidelobes (particularly near the edges).

1 reply
Today at 11:22 AMView thread

Pradip Gatkine  11:26 AM
Also, there is another codeblock you have:
#Now we need to get the peaks!
lam = np.array(df['0'])
FSR = 20.0
op_power_norm_fib = np.array(df['1'])
peaks = find_3dB_width(lam, op_power_norm_fib, FSR)
center_nanometer = peaks[1][0]
print(peaks[1])
Here, note that you are only looking at one spectral channel (i.e. the first spectral channel), since you are using df['1']. To see the impact of an emission line on all the spectral channels , you will have to run a for loop. (edited) 
New
11:28
Here's the codeblock I used to make the plot shown above.
fig, ax = plt.subplots(figsize=(10,6))
df.plot(x='0', legend=0, ax = ax)
for i in range(1,chan_num+1):
    lam = np.array(df['0'])
    op_power_norm_fib = np.array(df[str(i)])
    FSR = 20 # nm
    peak_ind, peak_lam, peak_power, peak_width, d_lam = find_3dB_width(lam, op_power_norm_fib, FSR)
    #plt.plot(lam, op_power_norm_fib)
    #plt.plot(peak_lam, peak_power, 'b*')
    plt.plot(peak_lam, peak_power, '*')
ax.set_ylim(-60,5)
plt.show()
Note that this was done using the find_3dB_width function as shown below:
def find_3dB_width(lam, op_power_norm_fib, FSR):
    d_lam = (lam[len(lam)-1]-lam[0])/len(lam)
    print(d_lam)
    FSR_chunk = np.int(0.8*FSR/d_lam) # Taking 80% of the FSR as the minimum distance between the peaks
    op_power_norm_fib_lin = np.power(10.0, op_power_norm_fib/10) # converting to linear scale for peak-width measurement
    peaks, _ = find_peaks(op_power_norm_fib_lin, height=0.1, distance=FSR_chunk)
    #find_peaks is defind in scipy. You can use it to place the emission lines! Get the array from here
    results_half = peak_widths(op_power_norm_fib_lin, peaks, rel_height=0.5)  # rel_height = 0.5 => FWHM  (half-power beam width)
    #you can define offsets in terms of the FWHM named results_half
    return peaks, lam[peaks], op_power_norm_fib[peaks], d_lam*results_half[0], d_lam  # The zeroth element is width

Change the plots from power (arbitrary units) to dB so they're logarithmic and you can see the 
difference in each channel. This is an important distinction. Make sure to add this!

Make a rectangular grid of subplots. Keep it to the peaks of 7 channels.
2 rows and four columns. Don't need a long label (lambda_cen) is sufficient and can be 
slightly above the plot. 
State the shaped and width in the caption. 
 
ax1.text(0.08,  0.90, '$z$ = 2 $-$ 2.7', color='blue', fontsize=12, fontweight='bold', transform = ax1.transAxes)
    You can have the handles for the subplots as an array. 
    You can just assign ax1 = ax[row][col] and that will work
    You can reassign ax1 in a for loop.
    This also works as well 
    ax1 = ax[index[0]][index[1]]
    ax1.set_xscale('linear')
    ax1.set_yscale('linear')
Also there's a really compact way to assign specific attributes to each subplot
ax1 = plot_format(ax1, xlim1=11, xlim2=13, ylim1= NVVlim1, ylim2= NVVlim2, xlabel=xlabel, ylabel=ylabel) 
Just add the power for multiple lines, and you can use a for loop to do this. 
Remember the chanels are circular in nature! It loops back from channel 1 to channel 13 ! 
It can move to the previous or next spectral order. The channels are numbered from right to left. 
We can clearly see that lines 3 channels separated are seperable. Just from two channel widths, it does not 
appear to be resolvable. Halfway between peaks is the worst case scenario. Difficult to tell if it's 
two or 3 lines without that information. In terms of the callibration matrix, can the callibration
matrix provide us with better information than the plots I made? Do we need the callibration matrix?
We planned to brainstorm what we could resolve based on the plots. The callibration matrix might help
too in the worst case scenarios. Ideally, the way the resolving power of an AWG is defined, 
(in astro it's just the 3dB width of the peaks). Here, 3dB is sufficient. (width at 3dB less than the
 peak). Here 3dB is the resolving power (usual definition) but that would really overestimate our
ability to resolve with a discrete AWG. There are conditions where we can't resolve lines separated
by 3x the 3dB width.
Now try lines separated by 1 spectral channel. 
Knowing the LSF ahead of time, you can tell whether there are 1 or 2 lines. Would not call them resolved
(could be a broad line or two different very close lines that are unresolved). 
Even when centered around the peaks and not offset. 

Two possible next steps - 
Callibration matrix (more mathy). Given a matrix of inputs 
The AWG matrix (A) dot product with a spectrum matrix (S) gives us the observed matrix (O)
A \cdot S = O
(A matrix rows are the wavelength response for a single channel. x axis is the wavelength 
axis and the y axis is the channel. Like in the dataframe! as many channels as rows and 
as many wavelength elements as columns)
(S matrix is the height! a column matrix with a height for each wavelength element.)
O is also a column matrix with a power output for each channel (as many cols as channels)
"Invert" the A matrix by referring to one of the papers Pradip sent that talked about the math. 
A transpose and then a square matrix, then invert that. 
	Small quick step bc need to transition to PSIsim with the resolving power and planet spectra.
		Next week!
Revisit the math paper and try to "invert" A, which we call B, and then S = B.O
As a pilot study, we'll simulate the KPIC setup. Tomorrow, as a short test, we should use a continuous
AWG as well. Pradip will send a new dataframe to use. In a continuous, AWG, there will be a peak of a 
channel at the 3dB width. So there will be a peak every 3dB width. Since the peaks are so close,
there will be a lot more cross talk! Lots of interference and the LSF will be broad. The resolving
power will be better. Find the resolving power and AWG. Will probably use this for PSIsim. 
Since it's a continuous AWG and the peaks are so close to each, resolving power and LSF will depend
less on the wavelength since the 3dB width won't contribute that much. 
Low cross talk cases are different. 3dB width is the FWHM! 

Figure out a way to from the A matrix to the B matrix. The plots are sufficient for our own 
understanding. Keeping them in plots is good. Make just a few plots for the continuous AWG.
Each peak,then halfway between the peaks to see the wavelength dependence and the resolving 
power. 39-40 channels. Make around 10 plots (later) 4x2 or 4x3 should work for our purposes.

Friday I should mention my results briefly. Here's the problem, and I've done the first step
(LSF and resolving power) using this step. Compress it to 5 minutes! 
Don't include the captions since I'll be summarizing them. Label each set of plots (e.g. single emission line at AWG peaks, single emission line halfway between two peaks) 
- Simulate spectra and simulate AWG. What is an AWG, goals (find atmospheric components like water, oxygen, methane) [1 slide background]
- Subproblem - LSF and resolving power since it's nontrivial for a photonic spectrograph and strategy we've been using (single and multiple lines at the peaks and offsets) [1 slide] (slide 6 from the presentation Pradip sent me)
- Snapshot of the code (since a lot of it is automated and Pradip really likes it!). Use a snapshot of the Emission_line class on Github. 
- Results [first slide at peaks with no offset and the one with the .7nm offset below it] 
- Results [separation at 1 channel width]. (what we have now is good, use the top row of slide 5). 
Tried a few different combinations to see whethere we could resolve 2 spectral lines or just 1. 
What if I tried to resolve any seperation first and then shift it to the peaks to see? This seems dumb.
 
Don't be extensive in the group meeting.
Use the presentation to prep for the final presentation at the end of SURF. Reuse some of the material
for Tuesday! 
The deadline passed for the one Dimitri mentioned. There will be more every few months with SPEI.
The only drawback is that you have to submit 6 months ahead of time. Paper deadline is 1 month before
the conference. Next year! June 2022 SPEI astronomical instrumentation. All kinds of SPEI conferences!
OSA (Optical Society of America). Summers and winters usually. There will be more opportunities!!
No shortage of opportunities!  
5-10 minute catch up tomorrow at 10 AM. 
Overleaf adds new stuff all the time! 

Imager and spectrograph in one. Spaxel (spatial and pixel elements to get the spectrum for each pixel). 
Spectral cube! High redshift galaxies! 
Use the downloaded Webex desktop app. It might not let you share your screen but it should
be fine.
Lots of the spectra are readily available from PICASO. 
Gj! :) 
In the group meeting, explain what the plots are in the second slides 
(each color is a different discrete spectral channel) and we've plotted the transmission
for different wavelength ranges.
Show a narrow line and a broadline from one of the papers. Wavelength vs output and
pixel vs output. Narrow input, wider output. Show the concept of the LSF. Use 
graphs. Crop out the 3rd panel for Friday's meeting. Friday has a broader audience
so be more deliberate about the explanation. I showed the inputs which is good!
Show that the shape of the LSF is wavelength dependent by just shifting the wavelengths
by half a spectral channel! 
Go with normalized emission lines! Each emission has the same noramlized power (same 
area under the curve). Larger points and shrink the figure. Don't spend too much time
making them the same figure. Just keep it like this for right now. Reformat with
the continuous case. Second column, top and third look similar. Say each difference out 
loud. Switch column to and 3. compare 1 and 2. then compare 2 and 3. then compare column 
3 and the bottom name. Refer to them by column # and what they're measuring!
Presentation tip: have a red rectangle come between 1 and 2. Make an animation 
highlighting each of the plots you want to highlight. For future presentations!   
Don't worry about the Gaussian emission lines right now. Maybe 1 or 2 runs later.
Use the builtin function Pradip is sending to make the Gaussian function. Not very high
priority. Continuous AWG is more important. Good to have just in case but not rn. Will
move on. 

Find the resolution? 
Add vertical lines to indicate the peaks of each line.

When we observe the lines, we correct for noise in the tails. In a conventional spectrograph,
the source spectrum convolved with the LSF is our observation. 
7/28/21
Get the 3dB width! 
Do the Gaussian fit in linear space? lognormal is misnomer since we want the log of the Gaussian,
which is different! Do the fitting in linear space and then convert! 1 or .5 nm for the width guess.
Don't mix log and linear space!  Math in linear space and plots in log space.
Keep the calculations and what space.
Reuse the first interim report and add the new plots! 
Try a Gaussian emission line instead! 
Plot line width vs 3dB width of Gaussian fit. Draw a dashed line when the slope of the line increases.
Being able to resolve two lines (show that a fit of two Gaussians is better than a singular Gaussian)
is a better way to measure the resolution of the spectrograph. This is a more direct definition
but it's not as common :( The 3dB width will let us compare to other spectrometers.
Finalize this with a Gaussian emission line. (Just always use a Gaussian line from now on). 
Add Lorentzian? Just stick with a Gaussian for right now. (In nature you might see a convolution
of a Gaussian and a Lorentzian but that's really computationally intensive). Maybe add a Lorentzian
later.  

A few hours to fix the code, then abstract and report by the of the day. 
First Draft - Send anytime tomorrow! 
Go with oral presentation for SURF and poster for SPIE or any other conferences. Exoplanet conference
in November or March (ExoCal at JPL cohosted with IPAC) and very welcoming with SURF and high schoolers.
Plot the average and the raw data for the FWHM. 

Problem with memory allocation, use hard drive to fix
Try looking where the virtual machine lives on my Windows machine. 
It should be a singular file (like a .iso) to check its size.
It already takes up over 7 GB, so I think it's out of space.
Give it more memory! 25 GB for the data and spectra. 
Some of the installation didn't work on collaboratory (floating system so installation is required 
each time, and it's a lot to handle all of the environment variables). Lots of things are version
dependent, and some parts won't work on older versions.
Gas cells in EPL and tunable laser source (borrowed from JPL), most accurate way to do it by sweeping wavelengths
Training for characterization, currently being used. 
fiber - 10 micron, very small modes
~2 weeks from now. training before school starts! 
fix input, align fiber, align with outpout channel, sweep the laser by lambda, record on power meter.
Repeat for different channels.  In this case, the AWG is higher resolution and lower FSR. 
Use the calibration matrix, then pass a continuous light source through the gass cell to measure the 
full spectrum and then retrieve it. With the power meter, try to recreate the real spectrum! 
Aim for journals like those by SPIE with the experiments and exoplanet spectra too!
Pradip is scheduling it sooner and the waveguides are already aligned!!
	Great to get started very quickly. It may only take a week to collect all the data! 

9/11/2021
It looks good on the second screen with 1680 x 1050 resolution (16:10 width ratio).
It's actually perfect on host screen 2 (my monitor not my laptop) 1920 x 1200 (16:10). 
Scale 100%
Ctrl + Alt + t opens the terminal in Ubuntu
type "lab_release -a" to check the version of Ubuntu installed. I have 20.04 so I'll be
following this tutorial to install Anaconda